generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ---------- ENUMS ----------
 */

enum UserRole {
  ADMIN
  MANAGER
}

enum LocalStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum TenantType {
  INDIVIDUAL
  COMPANY
}

enum LeaseStatus {
  ACTIVE
  TERMINATED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
}

enum PaymentStatus {
  PENDING
  COMPLETED
}

enum NotificationType {
  EMAIL
  SMS
  SYSTEM
}

enum OwnerTable {
  LEASES
  PAYMENTS
}

/**
 * ---------- MODELS ----------
 */

model User {
  id            String   @id @default(uuid()) @db.Uuid
  email         String   @unique
  password_hash String
  full_name     String
  role          UserRole
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())

  documents  Document[] @relation("UploadedBy")
  audit_logs AuditLog[]

  @@index([role])
}

model Property {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  location    String
  description String
  created_at  DateTime @default(now())

  locals Local[]
}

model Local {
  id             String      @id @default(uuid()) @db.Uuid
  property_id    String      @db.Uuid
  reference_code String      @unique
  floor          String?
  unit_type      String?
  size_m2        Float?
  status         LocalStatus

  property Property @relation(fields: [property_id], references: [id])
  leases   Lease[]

  @@index([property_id])
}

model Tenant {
  id         String     @id @default(uuid()) @db.Uuid
  name       String
  type       TenantType
  email      String?
  phone      String?
  created_at DateTime   @default(now())

  leases Lease[]
}

model Lease {
  id              String       @id @default(uuid()) @db.Uuid
  tenant_id       String       @db.Uuid
  local_id        String       @db.Uuid
  lease_reference String       @unique
  start_date      DateTime
  end_date        DateTime?
  rent_amount     Float
  billing_cycle   BillingCycle
  status          LeaseStatus

  tenant    Tenant     @relation(fields: [tenant_id], references: [id])
  local     Local      @relation(fields: [local_id], references: [id])
  payments  Payment[]
  documents Document[] @relation("LeaseDocuments")

  @@index([tenant_id])
  @@index([local_id])
}

model PaymentMode {
  id             String  @id @default(uuid()) @db.Uuid
  code           String  @unique
  display_name   String
  requires_proof Boolean @default(false)

  payments Payment[]
}

model Payment {
  id              String        @id @default(uuid()) @db.Uuid
  lease_id        String        @db.Uuid
  amount          Float
  paid_at         DateTime      @default(now())
  payment_mode_id String        @db.Uuid
  reference       String?
  status          PaymentStatus

  lease        Lease       @relation(fields: [lease_id], references: [id])
  payment_mode PaymentMode @relation(fields: [payment_mode_id], references: [id])
  documents    Document[]  @relation("PaymentDocuments")

  @@index([lease_id])
  @@index([payment_mode_id])
}

model Document {
  id          String     @id @default(uuid()) @db.Uuid
  owner_table OwnerTable
  owner_id    String     @db.Uuid
  file_key    String
  filename    String
  doc_type    String
  uploaded_by String     @db.Uuid
  uploaded_at DateTime   @default(now())

  uploaded_user User @relation("UploadedBy", fields: [uploaded_by], references: [id])

  // âœ… Unique foreign key constraint names
  lease   Lease?   @relation("LeaseDocuments", fields: [owner_id], references: [id], map: "documents_owner_id_lease_fkey")
  payment Payment? @relation("PaymentDocuments", fields: [owner_id], references: [id], map: "documents_owner_id_payment_fkey")

  @@index([owner_table, owner_id])
  @@map("documents")
}

model Notification {
  id         String           @id @default(uuid()) @db.Uuid
  type       NotificationType
  recipient  String
  subject    String?
  message    String
  status     String
  sent_at    DateTime?
  retries    Int              @default(0)
  created_at DateTime         @default(now())
}

model AuditLog {
  id           String   @id @default(uuid()) @db.Uuid
  user_id      String   @db.Uuid
  action       String
  entity_table String?
  entity_id    String?  @db.Uuid
  old_data     Json?
  new_data     Json?
  ip_address   String?
  created_at   DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@index([user_id])
}
