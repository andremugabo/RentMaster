#!/usr/bin/env node
"use strict";var B=Object.create;var L=Object.defineProperty;var J=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var G=Object.getPrototypeOf,z=Object.prototype.hasOwnProperty;var T=(e,n,t,o)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of A(n))!z.call(e,s)&&s!==t&&L(e,s,{get:()=>n[s],enumerable:!(o=J(n,s))||o.enumerable});return e};var C=(e,n,t)=>(t=e!=null?B(G(e)):{},T(n||!e||!e.__esModule?L(t,"default",{value:e,enumerable:!0}):t,e));var q=require("@prisma/generator-helper");var d=C(require("path")),D=C(require("child_process")),p=C(require("fs")),O=C(require("os")),k=C(require("dotenv"));k.config();function W(e){let n=e.indexOf('"datamodel"'),t=e.indexOf("{",n),o=0,s=t;for(;s<e.length;){let f=e[s++];if(f==="{")o++;else if(f==="}"&&(o--,o===0))break}return e.slice(t,s)}async function K(e,n,t){let o=d.resolve(d.join(t,"schema.prisma"));p.default.writeFileSync(o,n);let s=await new Promise((f,$)=>{let m=D.exec(`"${e}" --datamodel-path="${o}" cli dmmf`),y="";m.stderr?.on("data",g=>{g.includes("error:")&&$(g.slice(g.indexOf("error:"),g.indexOf("\\n")))}),m.stdout?.on("data",g=>{y+=g}),m.on("exit",()=>{f(y)})});return W(s)}function U(e,n){let{tableOnly:t=!1,ignoreEnums:o=!1,includeRelationFromFields:s=!1,disableEmoji:f=!1}=n??{},$="erDiagram",m=e.models.concat(e.types),y=t||o?"":e.enums.map(l=>`
        ${l.dbName||l.name} {
            ${l.values.map(i=>`${i.name||i.dbName} ${i.dbName||i.name}`).join(`
`)}
        }
    `).join(`

`),g=f?'"PK"':'"\u{1F5DD}\uFE0F"',b=f?'"nullable"':'"\u2753"',v=m.map(l=>`  "${l.dbName||l.name}" {
${t?"":l.fields.filter(H(l,s)).map(i=>`    ${i.type.trimStart()} ${i.name.replace(/^_/,"z_")} ${i.isId||l.primaryKey?.fields?.includes(i.name)?g:""}${i.isRequired?"":b}`).join(`
`)}
    }
  `).join(`

`),w="";for(let l of m)for(let i of l.fields){let h=i.kind==="enum";if(h&&(t||o))continue;let S=`${h?"enum:":""}${i.name}`,x=`"${l.dbName||l.name}"`,E=`"${m.find(a=>a.name===i.type)?.dbName||i.type}"`;if(i.relationFromFields&&i.relationFromFields.length>0||h){let a="||";i.isList?a="}o":i.isRequired||(a="|o");let c=m.find(r=>r.name===E),u=c?.fields.find(({relationName:r})=>r===i.relationName),M=a;u?.isList?a="o{":u?.isRequired||(a="o|"),w+=`    ${x} ${a}--${M} ${c?.dbName||E} : "${S}"
`}else if(m.find(a=>a.name===i.type||a.dbName===i.type)&&i.relationFromFields?.length===0){let a=m.find(c=>c.name===i.type||c.dbName===i.type);if(a){let c=m.indexOf(l),u=m.indexOf(a);c<u&&(w+=`    ${x} o{--}o ${E} : ""
`)}}else if(i.kind==="object"){let a=e.types.find(c=>c.name.replace(/^_/,"z_").replace(/\s/g,""));if(console.log(E,a),a){let c="||";i.isList?c="}o":i.isRequired||(c="|o");let u=a?.fields.find(({relationName:r})=>r===i.relationName),M=c;u?.isList?c="o{":u?.isRequired||(c="o|"),w+=`    ${x} ${c}--${M} ${a.dbName||E} : "${S}"
`}}}return`${$}
${y}
${v}
${w}`}var H=(e,n)=>t=>n?t.kind!=="object":t.kind!=="object"&&!e.fields.find(({relationFromFields:o})=>o?.includes(t.name)),Q=(e,n)=>{let t=n?.split(`
`).filter(o=>o.includes("@map")||o.includes("model ")).map(o=>o.trim());return e.map(o=>({...o,fields:o.fields.map(s=>{let f="None",$=t.filter(m=>(f==="Match"&&m.includes("model ")&&(f="End"),f==="None"&&m.includes(`model ${o.name} `)&&(f="Match"),f==="Match")).find(m=>m.includes(`${s.name} `)&&m.includes("@map"));if($){let y=new RegExp(/@map\(\"(.*?)\"\)/,"g").exec($);if(y?.[1]){let g=y[1].replace(/^_/,"z_").replace(/\s/g,"");s.name=g}}return s})}))},P=async e=>{try{let n=e.generator.output?.value||"./prisma/ERD.svg",t=e.generator.config,o=t.theme??"forest",s=d.resolve(d.join(t.mmdcPath||"node_modules/.bin","mmdc")),f=t.tableOnly==="true",$=t.disableEmoji==="true",m=t.ignoreEnums==="true",y=t.includeRelationFromFields==="true",g=process.env.DISABLE_ERD==="true"||t.disabled==="true",b=t.erdDebug==="true"||!!process.env.ERD_DEBUG;if(b&&(console.log("debug mode enabled"),console.log("config",t)),g)return console.log("ERD generator is disabled");let v=Object.values(e.binaryPaths?.queryEngine||{});if(!v[0])throw new Error("no query engine found");let w=v[0],l=p.default.mkdtempSync(`${O.default.tmpdir()+d.sep}prisma-erd-`),i=await K(w,e.datamodel,l);if(!i)throw new Error("could not parse datamodel");if(b&&i){p.default.mkdirSync(d.resolve("prisma/debug"),{recursive:!0});let r=d.resolve("prisma/debug/1-datamodel.json");p.default.writeFileSync(r,i),console.log(`data model written to ${r}`)}let h=JSON.parse(i);if(h.models=Q(h.models,e.datamodel),h.types||(h.types=[]),b&&h.models){let r=d.resolve("prisma/debug/2-datamodel-map-applied.json");p.default.writeFileSync(r,JSON.stringify(h,null,2)),console.log(`applied @map to fields written to ${r}`)}let S=U(h,{tableOnly:f,ignoreEnums:m,includeRelationFromFields:y,disableEmoji:$});if(b&&S){let r=d.resolve("prisma/debug/3-mermaid.mmd");p.default.writeFileSync(r,S),console.log(`mermaid written to ${r}`)}if(!S)throw new Error("failed to construct mermaid instance from dml");if(n.endsWith(".md"))return p.default.writeFileSync(n,`\`\`\`mermaid
${S}\`\`\`
`);let x=d.resolve(d.join(l,"prisma.mmd"));p.default.writeFileSync(x,S);let E={deterministicIds:!0,maxTextSize:9e4,er:{useMaxWidth:!0},theme:o},a=E;if(t?.mermaidConfig){let r=await import(d.resolve(t.mermaidConfig));b&&console.log("imported mermaid config: ",r),a={...E,...r}}let c=d.resolve(d.join(l,"config.json"));p.default.writeFileSync(c,JSON.stringify(a));let u=t.puppeteerConfig;if(u&&!p.default.existsSync(u))throw new Error(`Puppeteer config file "${u}" does not exist`);if(!u){let r=d.resolve(d.join(l,"puppeteerConfig.json")),F,R={logLevel:b?"warn":"error",executablePath:F};if(O.default.platform()==="darwin"&&O.default.arch()==="arm64")try{let N=D.execSync("which chromium").toString().replace(`
`,"");if(!N)throw new Error("Could not find chromium executable. Refer to https://github.com/keonik/prisma-erd-generator#issues for next steps.");R.executablePath=N,R.args=["--no-sandbox"]}catch(N){console.error(N),console.log(`
Prisma ERD Generator: Unable to find chromium path for you MacOS arm64 machine. Attempting to use the default at ${F}. To learn more visit https://github.com/keonik/prisma-erd-generator#-arm64-users-
`),F="/usr/bin/chromium-browser"}p.default.writeFileSync(r,JSON.stringify(R)),u=r}if(t.mmdcPath){if(!p.default.existsSync(s))throw new Error(`
Mermaid CLI provided path does not exist. 
${s}`)}else if(!p.default.existsSync(s)){let r=D.execSync("find ../.. -name mmdc").toString().split(`
`).filter(F=>F).pop();if(!r||!p.default.existsSync(r))throw new Error(`Expected mermaid CLI at 
${s}

or
${r}
 but this package was not found.`);s=d.resolve(r)}let M=`"${s}" -i "${x}" -o "${n}" -c "${c}" -p "${u}"`;if(b&&M&&console.log("mermaid command: ",M),D.execSync(M),!p.default.existsSync(n))throw new Error(`Issue generating ER Diagram. Expected ${n} to be created`)}catch(n){throw console.error(n),n}};var I=require("fs"),_=process.env.DISABLE_ERD==="true",j;try{j=JSON.parse((0,I.readFileSync)("package.json","utf-8"))}catch(e){console.error(e),j={version:"1.0.0"}}(0,q.generatorHandler)({onManifest:()=>({defaultOutput:_?"N/A":"ERD.svg",prettyName:_?"No ERD":"Entity-relationship-diagram",requiresEngines:["queryEngine"],version:j?.version}),onGenerate:P});
