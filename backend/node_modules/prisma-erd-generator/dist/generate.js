"use strict";(()=>{var G=Object.create;var P=Object.defineProperty;var z=Object.getOwnPropertyDescriptor;var Q=Object.getOwnPropertyNames;var H=Object.getPrototypeOf,X=Object.prototype.hasOwnProperty;var N=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(n,t)=>(typeof require<"u"?require:n)[t]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')});var A=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports);var Z=(e,n,t,r)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of Q(n))!X.call(e,s)&&s!==t&&P(e,s,{get:()=>n[s],enumerable:!(r=z(n,s))||r.enumerable});return e};var F=(e,n,t)=>(t=e!=null?G(H(e)):{},Z(n||!e||!e.__esModule?P(t,"default",{value:e,enumerable:!0}):t,e));var q=A((be,ee)=>{ee.exports={name:"dotenv",version:"16.6.1",description:"Loads environment variables from .env file",main:"lib/main.js",types:"lib/main.d.ts",exports:{".":{types:"./lib/main.d.ts",require:"./lib/main.js",default:"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},scripts:{"dts-check":"tsc --project tests/types/tsconfig.json",lint:"standard",pretest:"npm run lint && npm run dts-check",test:"tap run --allow-empty-coverage --disable-coverage --timeout=60000","test:coverage":"tap run --show-full-coverage --timeout=60000 --coverage-report=text --coverage-report=lcov",prerelease:"npm test",release:"standard-version"},repository:{type:"git",url:"git://github.com/motdotla/dotenv.git"},homepage:"https://github.com/motdotla/dotenv#readme",funding:"https://dotenvx.com",keywords:["dotenv","env",".env","environment","variables","config","settings"],readmeFilename:"README.md",license:"BSD-2-Clause",devDependencies:{"@types/node":"^18.11.3",decache:"^4.6.2",sinon:"^14.0.1",standard:"^17.0.0","standard-version":"^9.5.0",tap:"^19.2.0",typescript:"^4.8.4"},engines:{node:">=12"},browser:{fs:!1}}});var J=A((De,w)=>{"use strict";var C=N("fs"),V=N("path"),te=N("os"),ne=N("crypto"),re=q(),R=re.version,oe=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function ie(e){let n={},t=e.toString();t=t.replace(/\r\n?/mg,`
`);let r;for(;(r=oe.exec(t))!=null;){let s=r[1],o=r[2]||"";o=o.trim();let a=o[0];o=o.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),a==='"'&&(o=o.replace(/\\n/g,`
`),o=o.replace(/\\r/g,"\r")),n[s]=o}return n}function se(e){e=e||{};let n=U(e);e.path=n;let t=y.configDotenv(e);if(!t.parsed){let a=new Error(`MISSING_DATA: Cannot parse ${n} for an unknown reason`);throw a.code="MISSING_DATA",a}let r=B(e).split(","),s=r.length,o;for(let a=0;a<s;a++)try{let i=r[a].trim(),p=ce(t,i);o=y.decrypt(p.ciphertext,p.key);break}catch(i){if(a+1>=s)throw i}return y.parse(o)}function ae(e){console.log(`[dotenv@${R}][WARN] ${e}`)}function I(e){console.log(`[dotenv@${R}][DEBUG] ${e}`)}function Y(e){console.log(`[dotenv@${R}] ${e}`)}function B(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function ce(e,n){let t;try{t=new URL(n)}catch(i){if(i.code==="ERR_INVALID_URL"){let p=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw p.code="INVALID_DOTENV_KEY",p}throw i}let r=t.password;if(!r){let i=new Error("INVALID_DOTENV_KEY: Missing key part");throw i.code="INVALID_DOTENV_KEY",i}let s=t.searchParams.get("environment");if(!s){let i=new Error("INVALID_DOTENV_KEY: Missing environment part");throw i.code="INVALID_DOTENV_KEY",i}let o=`DOTENV_VAULT_${s.toUpperCase()}`,a=e.parsed[o];if(!a){let i=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${o} in your .env.vault file.`);throw i.code="NOT_FOUND_DOTENV_ENVIRONMENT",i}return{ciphertext:a,key:r}}function U(e){let n=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(let t of e.path)C.existsSync(t)&&(n=t.endsWith(".vault")?t:`${t}.vault`);else n=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else n=V.resolve(process.cwd(),".env.vault");return C.existsSync(n)?n:null}function K(e){return e[0]==="~"?V.join(te.homedir(),e.slice(1)):e}function le(e){let n=!!(e&&e.debug),t=e&&"quiet"in e?e.quiet:!0;(n||!t)&&Y("Loading env from encrypted .env.vault");let r=y._parseVault(e),s=process.env;return e&&e.processEnv!=null&&(s=e.processEnv),y.populate(s,r,e),{parsed:r}}function de(e){let n=V.resolve(process.cwd(),".env"),t="utf8",r=!!(e&&e.debug),s=e&&"quiet"in e?e.quiet:!0;e&&e.encoding?t=e.encoding:r&&I("No encoding is specified. UTF-8 is used by default");let o=[n];if(e&&e.path)if(!Array.isArray(e.path))o=[K(e.path)];else{o=[];for(let u of e.path)o.push(K(u))}let a,i={};for(let u of o)try{let d=y.parse(C.readFileSync(u,{encoding:t}));y.populate(i,d,e)}catch(d){r&&I(`Failed to load ${u} ${d.message}`),a=d}let p=process.env;if(e&&e.processEnv!=null&&(p=e.processEnv),y.populate(p,i,e),r||!s){let u=Object.keys(i).length,d=[];for(let x of o)try{let b=V.relative(process.cwd(),x);d.push(b)}catch(b){r&&I(`Failed to load ${x} ${b.message}`),a=b}Y(`injecting env (${u}) from ${d.join(",")}`)}return a?{parsed:i,error:a}:{parsed:i}}function me(e){if(B(e).length===0)return y.configDotenv(e);let n=U(e);return n?y._configVault(e):(ae(`You set DOTENV_KEY but you are missing a .env.vault file at ${n}. Did you forget to build it?`),y.configDotenv(e))}function ue(e,n){let t=Buffer.from(n.slice(-64),"hex"),r=Buffer.from(e,"base64"),s=r.subarray(0,12),o=r.subarray(-16);r=r.subarray(12,-16);try{let a=ne.createDecipheriv("aes-256-gcm",t,s);return a.setAuthTag(o),`${a.update(r)}${a.final()}`}catch(a){let i=a instanceof RangeError,p=a.message==="Invalid key length",u=a.message==="Unsupported state or unable to authenticate data";if(i||p){let d=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw d.code="INVALID_DOTENV_KEY",d}else if(u){let d=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw d.code="DECRYPTION_FAILED",d}else throw a}}function pe(e,n,t={}){let r=!!(t&&t.debug),s=!!(t&&t.override);if(typeof n!="object"){let o=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw o.code="OBJECT_REQUIRED",o}for(let o of Object.keys(n))Object.prototype.hasOwnProperty.call(e,o)?(s===!0&&(e[o]=n[o]),r&&I(s===!0?`"${o}" is already defined and WAS overwritten`:`"${o}" is already defined and was NOT overwritten`)):e[o]=n[o]}var y={configDotenv:de,_configVault:le,_parseVault:se,config:me,decrypt:ue,parse:ie,populate:pe};w.exports.configDotenv=y.configDotenv;w.exports._configVault=y._configVault;w.exports._parseVault=y._parseVault;w.exports.config=y.config;w.exports.decrypt=y.decrypt;w.exports.parse=y.parse;w.exports.populate=y.populate;w.exports=y});var f=F(N("path")),M=F(N("child_process")),v=F(N("fs")),L=F(N("os")),W=F(J());W.config();function fe(e){let n=e.indexOf('"datamodel"'),t=e.indexOf("{",n),r=0,s=t;for(;s<e.length;){let o=e[s++];if(o==="{")r++;else if(o==="}"&&(r--,r===0))break}return e.slice(t,s)}async function ge(e,n,t){let r=f.resolve(f.join(t,"schema.prisma"));v.default.writeFileSync(r,n);let s=await new Promise((o,a)=>{let i=M.exec(`"${e}" --datamodel-path="${r}" cli dmmf`),p="";i.stderr?.on("data",u=>{u.includes("error:")&&a(u.slice(u.indexOf("error:"),u.indexOf("\\n")))}),i.stdout?.on("data",u=>{p+=u}),i.on("exit",()=>{o(p)})});return fe(s)}function he(e,n){let{tableOnly:t=!1,ignoreEnums:r=!1,includeRelationFromFields:s=!1,disableEmoji:o=!1}=n??{},a="erDiagram",i=e.models.concat(e.types),p=t||r?"":e.enums.map(g=>`
        ${g.dbName||g.name} {
            ${g.values.map(c=>`${c.name||c.dbName} ${c.dbName||c.name}`).join(`
`)}
        }
    `).join(`

`),u=o?'"PK"':'"\u{1F5DD}\uFE0F"',d=o?'"nullable"':'"\u2753"',x=i.map(g=>`  "${g.dbName||g.name}" {
${t?"":g.fields.filter(ye(g,s)).map(c=>`    ${c.type.trimStart()} ${c.name.replace(/^_/,"z_")} ${c.isId||g.primaryKey?.fields?.includes(c.name)?u:""}${c.isRequired?"":d}`).join(`
`)}
    }
  `).join(`

`),b="";for(let g of i)for(let c of g.fields){let D=c.kind==="enum";if(D&&(t||r))continue;let $=`${D?"enum:":""}${c.name}`,S=`"${g.dbName||g.name}"`,_=`"${i.find(m=>m.name===c.type)?.dbName||c.type}"`;if(c.relationFromFields&&c.relationFromFields.length>0||D){let m="||";c.isList?m="}o":c.isRequired||(m="|o");let h=i.find(l=>l.name===_),E=h?.fields.find(({relationName:l})=>l===c.relationName),O=m;E?.isList?m="o{":E?.isRequired||(m="o|"),b+=`    ${S} ${m}--${O} ${h?.dbName||_} : "${$}"
`}else if(i.find(m=>m.name===c.type||m.dbName===c.type)&&c.relationFromFields?.length===0){let m=i.find(h=>h.name===c.type||h.dbName===c.type);if(m){let h=i.indexOf(g),E=i.indexOf(m);h<E&&(b+=`    ${S} o{--}o ${_} : ""
`)}}else if(c.kind==="object"){let m=e.types.find(h=>h.name.replace(/^_/,"z_").replace(/\s/g,""));if(console.log(_,m),m){let h="||";c.isList?h="}o":c.isRequired||(h="|o");let E=m?.fields.find(({relationName:l})=>l===c.relationName),O=h;E?.isList?h="o{":E?.isRequired||(h="o|"),b+=`    ${S} ${h}--${O} ${m.dbName||_} : "${$}"
`}}}return`${a}
${p}
${x}
${b}`}var ye=(e,n)=>t=>n?t.kind!=="object":t.kind!=="object"&&!e.fields.find(({relationFromFields:r})=>r?.includes(t.name)),ve=(e,n)=>{let t=n?.split(`
`).filter(r=>r.includes("@map")||r.includes("model ")).map(r=>r.trim());return e.map(r=>({...r,fields:r.fields.map(s=>{let o="None",a=t.filter(i=>(o==="Match"&&i.includes("model ")&&(o="End"),o==="None"&&i.includes(`model ${r.name} `)&&(o="Match"),o==="Match")).find(i=>i.includes(`${s.name} `)&&i.includes("@map"));if(a){let p=new RegExp(/@map\(\"(.*?)\"\)/,"g").exec(a);if(p?.[1]){let u=p[1].replace(/^_/,"z_").replace(/\s/g,"");s.name=u}}return s})}))},we=async e=>{try{let n=e.generator.output?.value||"./prisma/ERD.svg",t=e.generator.config,r=t.theme??"forest",s=f.resolve(f.join(t.mmdcPath||"node_modules/.bin","mmdc")),o=t.tableOnly==="true",a=t.disableEmoji==="true",i=t.ignoreEnums==="true",p=t.includeRelationFromFields==="true",u=process.env.DISABLE_ERD==="true"||t.disabled==="true",d=t.erdDebug==="true"||!!process.env.ERD_DEBUG;if(d&&(console.log("debug mode enabled"),console.log("config",t)),u)return console.log("ERD generator is disabled");let x=Object.values(e.binaryPaths?.queryEngine||{});if(!x[0])throw new Error("no query engine found");let b=x[0],g=v.default.mkdtempSync(`${L.default.tmpdir()+f.sep}prisma-erd-`),c=await ge(b,e.datamodel,g);if(!c)throw new Error("could not parse datamodel");if(d&&c){v.default.mkdirSync(f.resolve("prisma/debug"),{recursive:!0});let l=f.resolve("prisma/debug/1-datamodel.json");v.default.writeFileSync(l,c),console.log(`data model written to ${l}`)}let D=JSON.parse(c);if(D.models=ve(D.models,e.datamodel),D.types||(D.types=[]),d&&D.models){let l=f.resolve("prisma/debug/2-datamodel-map-applied.json");v.default.writeFileSync(l,JSON.stringify(D,null,2)),console.log(`applied @map to fields written to ${l}`)}let $=he(D,{tableOnly:o,ignoreEnums:i,includeRelationFromFields:p,disableEmoji:a});if(d&&$){let l=f.resolve("prisma/debug/3-mermaid.mmd");v.default.writeFileSync(l,$),console.log(`mermaid written to ${l}`)}if(!$)throw new Error("failed to construct mermaid instance from dml");if(n.endsWith(".md"))return v.default.writeFileSync(n,`\`\`\`mermaid
${$}\`\`\`
`);let S=f.resolve(f.join(g,"prisma.mmd"));v.default.writeFileSync(S,$);let _={deterministicIds:!0,maxTextSize:9e4,er:{useMaxWidth:!0},theme:r},m=_;if(t?.mermaidConfig){let l=await import(f.resolve(t.mermaidConfig));d&&console.log("imported mermaid config: ",l),m={..._,...l}}let h=f.resolve(f.join(g,"config.json"));v.default.writeFileSync(h,JSON.stringify(m));let E=t.puppeteerConfig;if(E&&!v.default.existsSync(E))throw new Error(`Puppeteer config file "${E}" does not exist`);if(!E){let l=f.resolve(f.join(g,"puppeteerConfig.json")),j,T={logLevel:d?"warn":"error",executablePath:j};if(L.default.platform()==="darwin"&&L.default.arch()==="arm64")try{let k=M.execSync("which chromium").toString().replace(`
`,"");if(!k)throw new Error("Could not find chromium executable. Refer to https://github.com/keonik/prisma-erd-generator#issues for next steps.");T.executablePath=k,T.args=["--no-sandbox"]}catch(k){console.error(k),console.log(`
Prisma ERD Generator: Unable to find chromium path for you MacOS arm64 machine. Attempting to use the default at ${j}. To learn more visit https://github.com/keonik/prisma-erd-generator#-arm64-users-
`),j="/usr/bin/chromium-browser"}v.default.writeFileSync(l,JSON.stringify(T)),E=l}if(t.mmdcPath){if(!v.default.existsSync(s))throw new Error(`
Mermaid CLI provided path does not exist. 
${s}`)}else if(!v.default.existsSync(s)){let l=M.execSync("find ../.. -name mmdc").toString().split(`
`).filter(j=>j).pop();if(!l||!v.default.existsSync(l))throw new Error(`Expected mermaid CLI at 
${s}

or
${l}
 but this package was not found.`);s=f.resolve(l)}let O=`"${s}" -i "${S}" -o "${n}" -c "${h}" -p "${E}"`;if(d&&O&&console.log("mermaid command: ",O),M.execSync(O),!v.default.existsSync(n))throw new Error(`Issue generating ER Diagram. Expected ${n} to be created`)}catch(n){throw console.error(n),n}};})();
